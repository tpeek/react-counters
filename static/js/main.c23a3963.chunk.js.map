{"version":3,"sources":["components/Counter.js","components/ClassCounter.js","components/HookCounter.js","components/VarCounter.js","components/ReduxCounter.js","serviceWorker.js","index.js","App.js"],"names":["Counter","_ref","title","count","increment","react_default","a","createElement","Fragment","style","width","height","onClick","ClassCounter","state","_this","setState","components_Counter","this","Component","HookCounter","_useState","useState","_useState2","Object","slicedToArray","setCount","VarCounter","forceUpdate","store","createStore","arguments","length","undefined","type","window","__REDUX_DEVTOOLS_EXTENSION__","ReduxCounterContainer","connect","WrappedReduxCounter","es","Boolean","location","hostname","match","ReactDOM","render","className","components_ClassCounter","components_HookCounter","components_VarCounter","ReduxCounter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAYeA,EAVC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,MAAOC,EAAjBH,EAAiBG,UAAjB,OACdC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,oBAAYJ,GACZE,EAAAC,EAAAC,cAAA,UAAQE,MAAO,CAAEC,MAAO,GAAIC,OAAQ,IAAMC,QAASR,GAAnD,eCYWS,6MAbbC,MAAQ,CACNX,MAAO,KAGTC,UAAY,WACVW,EAAKC,SAAS,SAAAf,GAAA,MAAgB,CAAEE,MAAlBF,EAAGE,MAA8B,8EAI/C,OAAOE,EAAAC,EAAAC,cAACU,EAAD,CAASf,MAAM,gBAAgBC,MAAOe,KAAKJ,MAAMX,MAAOC,UAAWc,KAAKd,mBAVxDe,qBCKZC,EALK,WAAM,IAAAC,EACEC,mBAAS,GADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjBlB,EADiBoB,EAAA,GACVG,EADUH,EAAA,GAExB,OAAOlB,EAAAC,EAAAC,cAACU,EAAD,CAASf,MAAM,eAAeC,MAAOA,EAAOC,UAAW,kBAAMsB,EAASvB,EAAQ,OCFnFA,EAAQ,EAiBGwB,mLAdJ,IAAAZ,EAAAG,KACP,OACEb,EAAAC,EAAAC,cAACU,EAAD,CACEf,MAAM,cACNC,MAAOA,EACPC,UAAW,WACTD,IACAY,EAAKa,wBARUT,4BCanBU,EAAQC,YATE,WAAoC,IAAnChB,EAAmCiB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3B,CAAE5B,MAAO,GAChC,QADkD4B,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAAXC,MAErC,IANc,YAOZ,MAAO,CAAE/B,MAAOW,EAAMX,MAAQ,GAChC,QACE,OAAOW,SAMXmB,EACAE,OAAOC,8BAAgCD,OAAOC,gCAG1CC,EAAwBC,YAC5B,SAAAxB,GAAK,OAAIA,GACT,CAAEV,UAnBc,iBAAO,CAAE8B,KAFT,eAmBYI,CAG5BtC,GAQauC,EANa,kBAC1BlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUX,MAAOA,GACfxB,EAAAC,EAAAC,cAAC8B,EAAD,CAAuBnC,MAAM,0BClBbuC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MAAM,2DCbnCC,IAASC,OAAOzC,EAAAC,EAAAC,cCED,kBACbF,EAAAC,EAAAC,cAAA,OAAKwC,UAAU,OACb1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAA,aDXY,MAAS6C,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c23a3963.chunk.js","sourcesContent":["import React from 'react';\n\nconst Counter = ({ title, count, increment }) => (\n  <React.Fragment>\n    <h1>{title}</h1>\n    <h2>Count: {count}</h2>\n    <button style={{ width: 90, height: 40 }} onClick={increment}>\n      increment\n    </button>\n  </React.Fragment>\n);\n\nexport default Counter;\n","import React, { Component } from 'react';\n\nimport Counter from './Counter';\n\nclass ClassCounter extends Component {\n  state = {\n    count: 0,\n  };\n\n  increment = () => {\n    this.setState(({ count }) => ({ count: count + 1 }));\n  };\n\n  render() {\n    return <Counter title=\"Class Counter\" count={this.state.count} increment={this.increment} />;\n  }\n}\n\nexport default ClassCounter;\n","import React, { useState } from 'react';\n\nimport Counter from './Counter';\n\nconst HookCounter = () => {\n  const [count, setCount] = useState(0);\n  return <Counter title=\"Hook Counter\" count={count} increment={() => setCount(count + 1)} />;\n};\n\nexport default HookCounter;\n","import React, { Component } from 'react';\n\nimport Counter from './Counter';\n\nlet count = 0;\n\nclass VarCounter extends Component {\n  render() {\n    return (\n      <Counter\n        title=\"Var Counter\"\n        count={count}\n        increment={() => {\n          count++;\n          this.forceUpdate();\n        }}\n      />\n    );\n  }\n}\n\nexport default VarCounter;\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\n\nimport Counter from './Counter';\n\nconst INCREMENT = 'INCREMENT';\n\nconst increment = () => ({ type: INCREMENT });\n\nconst reducer = (state = { count: 0 }, { type }) => {\n  switch (type) {\n    case INCREMENT:\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  reducer,\n  undefined,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nconst ReduxCounterContainer = connect(\n  state => state,\n  { increment }\n)(Counter);\n\nconst WrappedReduxCounter = () => (\n  <Provider store={store}>\n    <ReduxCounterContainer title=\"Redux Counter\" />\n  </Provider>\n);\n\nexport default WrappedReduxCounter;\n","/* eslint no-console: off */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nimport ClassCounter from './components/ClassCounter';\nimport HookCounter from './components/HookCounter';\nimport VarCounter from './components/VarCounter';\nimport ReduxCounter from './components/ReduxCounter';\nimport './App.css';\n\nexport default () => (\n  <div className=\"App\">\n    <ClassCounter />\n    <hr />\n    <HookCounter />\n    <hr />\n    <VarCounter />\n    <hr />\n    <ReduxCounter />\n    <hr />\n  </div>\n);\n"],"sourceRoot":""}